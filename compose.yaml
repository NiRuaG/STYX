#% initially generated by `docker init`

services:
  the-db:
    image: mongo:7.0.3
    # expose:
    #   - 27017
    # restart: always
    volumes:
      - the-db-data:/data/db
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: example
  #* for a UI to the db
  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

  the-backend:
    build: .
    environment:
      - PORT=3001
      - MONGODB_URI=mongodb://the-db:27017/styxgame
      - NODE_ENV=${NODE_ENV}
      - SESSION_SECRET=${SESSION_SECRET}
      - ADMIN_ID=${ADMIN_ID}
      - ADMIN_PW=${ADMIN_PW}
    ports:
      - 3001:3001
    depends_on:
      - the-db
      # The commented out section below is an example of how to define a PostgreSQL
      # database that your application can use. `depends_on` tells Docker Compose to
      # start the database before your application. The `db-data` volume persists the
      # database data between container restarts. The `db-password` secret is used
      # to set the database password. You must create `db/password.txt` and add
      # a password of your choosing to it before running `docker-compose up`.
      #     depends_on:
      #       db:
      #         condition: service_healthy
      #   db:
      #     image: postgres
      #     restart: always
      #     user: postgres
      #     secrets:
      #       - db-password
      #     volumes:
      #       - db-data:/var/lib/postgresql/data
      #     environment:
      #       - POSTGRES_DB=example
      #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      #     expose:
      #       - 5432
      #     healthcheck:
      #       test: [ "CMD", "pg_isready" ]
      #       interval: 10s
      #       timeout: 5s
      #       retries: 5
      # secrets:
      #   db-password:
      #     file: db/password.txt

  the-frontend:
    build: ./client
    environment:
      - BACKEND_PROXY=http://the-backend:3001
      - NODE_ENV=${NODE_ENV}
    ports:
      - 3000:3000

volumes:
  the-db-data:
